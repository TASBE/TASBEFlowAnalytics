function [CM] = make_color_model_excel()
    % Auto generated by colorModel.py, modified by us
    TASBEConfig.checkpoint('init');

    stem = '../FCS/';

    % Read in Excel for information
    [num,txt,raw] = xlsread('C:/Users/coverney/Documents/SynBio/Template/Template1.xlsx', 'Cytometer', 'A1:H22');

    % Reading and setting TASBEConfig preferences
    bead_model = cell2mat(raw(3,2));
    bead_batch = cell2mat(raw(3,1));
    rangeMin = cell2mat(raw(3,3));
    rangeMax = cell2mat(raw(3,4));
    peakThreshold = cell2mat(raw(3,5));
    beadChannel = cell2mat(raw(3,6));
    secondaryChannel = cell2mat(raw(22,2));
    plotPath = cell2mat(raw(22,1));
    val_all_channels = cell2mat(raw(22,4));

    if ~isnan(plotPath)
        TASBEConfig.set('plots.plotPath', char(plotPath));
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing plotPath in "Cytometer" sheet');
    end

    if ~isnan(bead_model)
        TASBEConfig.set('beads.beadModel', char(bead_model)); 
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing bead model in "Cytometer" sheet');
    end

    if ~isnan(bead_batch)
        TASBEConfig.set('beads.beadBatch', char(bead_batch)); 
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing bead batch in "Cytometer" sheet');
    end

    % Ignore all bead data below 10^[rangeMin] as being too "smeared" with noise
    if ~isnan(rangeMin)
        TASBEConfig.set('beads.rangeMin', rangeMin);
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing rangeMin in "Cytometer" sheet');
    end

    if ~isnan(rangeMax)
        TASBEConfig.set('beads.rangeMax', rangeMax);
    else
        TASBESession.warn('make_color_model', 'MissingPreference', 'Missing rangeMax in "Cytometer" sheet');
    end

    % The peak threshold determines the minumum count per bin for something to
    % be considered part of a peak.  Set if automated threshold finds too many or few peaks
    if ~isnan(peakThreshold)
        TASBEConfig.set('beads.peakThreshold', peakThreshold);
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing peakThreshold in "Cytometer" sheet');
    end

    if ~isnan(beadChannel)
        TASBEConfig.set('beads.beadChannel', char(beadChannel));
    else
        TASBESession.warn('make_color_model', 'MissingPreference', 'Missing beadChannel in "Cytometer" sheet');
    end

    if ~isnan(val_all_channels)
        TASBEConfig.set('beads.validateAllChannels', val_all_channels);
    else
        TASBESession.warn('make_color_model', 'MissingPreference', 'Missing validate all channels in "Cytometer" sheet');
    end

    % When dealing with very strong fluorescence, use secondary channel to segment
    if ~isnan(secondaryChannel)
        secondaryChannel = char(secondaryChannel);
        TASBEConfig.set('beads.secondaryBeadChannel',secondaryChannel);
    else
        TASBESession.warn('make_color_model', 'MissingPreference', 'Missing secondary bead channel in "Cytometer" sheet');
    end

    % Extract bead, blank, and all files
    if isnan(cell2mat(raw(3,7))) | isnan(cell2mat(raw(6,7))) | isnan(cell2mat(raw(19,7)))
        TASBESession.warn('make_color_model', 'MissingCriticalFiles', 'Make sure beads, blank, and all filenames are in "Cytometer" sheet');
    else
        beads_file = char(cell2mat(raw(3,7)));
        blank_file = char(cell2mat(raw(6,7)));
        all_file = char(cell2mat(raw(19,7)));
    end

    % Autodetect gating with an N-dimensional gaussian-mixture-model
    AGP = AutogateParameters();
    autogate = GMMGating([stem blank_file],AGP,'plots');

    % Dealing with channels 
    channel_names = {};
    print_names = {};
    excit_wavelens = {};
    filters = {};
    filenames = {};
    % Create one channel / colorfile pair for each color
    channels = {}; colorfiles = {};
    for i=9:16
        print_name = cell2mat(raw(i,2));
        ind = i - 8;
        if ~isnan(print_name)
            % Check to make sure there is enough information for each channel
            row = raw(i,:);
            for j=1:8
                if isnan(cell2mat(row(j)))
                    TASBESession.warn('make_color_model', 'MissingPreference', 'Missing %s for channel %s in "Cytometer" sheet', char(cell2mat(raw(8,j))), num2str(cell2mat(raw(i,1))));
                end
            end

            print_name = char(print_name);
            channel_name = char(cell2mat(raw(i,3)));
            excit_wavelen = cell2mat(raw(i,5));
            filter = strsplit(char(cell2mat(raw(i,6))), '/');
            filename = char(cell2mat(raw(i,7)));
            color = char(cell2mat(raw(i,8)));

            print_names{ind} = print_name;
            channel_names{ind} = channel_name;
            excit_wavelens{ind} = excit_wavelen;
            filters{ind} = filter;
            filenames{ind} = filename;

            channels{ind} = Channel(channel_name, excit_wavelen, str2double(filter{1}), str2double(filter{2}));
            channels{ind} = setPrintName(channels{ind}, print_name); % Name to print on charts
            channels{ind} = setLineSpec(channels{ind}, color); % Color for lines, when needed
            colorfiles{ind} = [stem filename];
        else
            break
        end
    end

    channel_info = [print_names; channel_names; excit_wavelens; filters; filenames]; %columns represent channels

    % Included a check to make sure that the number of channels matches with
    % the number in the template
    if numel(channels) ~= cell2mat(raw(19,1))
        TASBESession.warn('make_color_model', 'DimensionMismatch', 'Channel dimensions do not match with number of channels from template');
    end

    % Multi-color controls are used for converting other colors into FITC units
    colorpairfiles = {};
    % Entries are: channel1, channel2, constitutive channel, filename
    % This allows channel1 and channel2 to be converted into one another.
    % If you only have two colors, you can set consitutive-channel to equal channel1 or channel2
    n_channels = numel(channels);
    if n_channels == 2
        colorpairfiles{1} = {channels{1}, channels{2}, channels{2}, [stem all_file]};
    else
        for i=1:n_channels-1
            if i >= 2
                colorpairfiles{end+1} = {channels{1}, channels{i+1}, channels{i-1}, [stem all_file]};
            else
                colorpairfiles{end+1} = {channels{1}, channels{i+1}, channels{i+2}, [stem all_file]};
            end
        end
    end

    % Making the color model
    CM = ColorModel([stem beads_file], [stem blank_file], channels, colorfiles, colorpairfiles);
    CM = set_ERF_channel_name(CM, channel_names{1});
    CM = add_prefilter(CM,autogate);

    % Setting some CM preferences (Q: should they gradually all be moved to
    % TASBEConfig?)
    if ~isnan(cell2mat(raw(19,5)))
        CM = set_translation_plot(CM, cell2mat(raw(19,5)));
    else
        TASBESession.warn('make_color_model', 'MissingPreference', 'Missing display translation plot logical in "Cytometer" sheet');
    end

    if ~isnan(cell2mat(raw(22,3)))
        CM = set_noise_plot(CM, cell2mat(raw(22,3)));
    else
        TASBESession.warn('make_color_model', 'MissingPreference', 'Missing display noise plot logical in "Cytometer" sheet');
    end

    % Ignore channel data for ith channel if below 10^[value(i)]
    if ~isnan(cell2mat(raw(19,6)))
        trans_channel_min = strsplit(char(cell2mat(raw(19,6))), ',');
        CM = set_translation_channel_min(CM,[str2double(trans_channel_min{1}),str2double(trans_channel_min{2}),str2double(trans_channel_min{3})]);
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing translation channel min X,Y,Z in "Cytometer" sheet');
    end

    % Execute and save the model
    CM = resolve(CM);
    if ~isnan(cell2mat(raw(22,5)))
        save('-V7',char(cell2mat(raw(22,5))),'CM');
    else
        save('-V7','CM_no_name','CM');
        TASBESession.warn('make_color_model', 'MissingPreference', 'Missing CM file name in "Cytometer" sheet');
    end
end




