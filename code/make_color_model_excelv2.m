function [CM] = make_color_model_excelv2()
    % Auto generated by colorModel.py, modified by us
    TASBEConfig.checkpoint('init');
    
    % TODO: CHANGE TEMPLATE FILENAME ONCE TEMPLATE IN SAME FOLDER
    % Read in Excel for information, cytometer sheet
    [~,~,raw] = xlsread('C:/Users/coverney/Documents/SynBio/Template/batch_template.xlsx', 'Cytometer', 'A1:H22');
    % Read in Excel for information, Experiment sheet
    [~,~,raw2] = xlsread('C:/Users/coverney/Documents/SynBio/Template/batch_template.xlsx', 'Experiment', 'A1:J20');
    % Read in Excel for information, Samples sheet
    [~,~,raw3] = xlsread('C:/Users/coverney/Documents/SynBio/Template/batch_template.xlsx', 'Samples', 'A1:O18');
    
    if ~isnan(cell2mat(raw2(13,10)))
        stem = char(cell2mat(raw2(13,10)));
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing data directory stem in "Experiment" sheet');
        stem = '';
    end
    
    % TODO CALL TASBECONFIG_UPDATES TO UPDATE PREFERENCES

    % Reading and setting TASBEConfig preferences
    bead_model = cell2mat(raw(3,2));
    bead_batch = cell2mat(raw(3,1));
    rangeMin = cell2mat(raw(3,3));
    rangeMax = cell2mat(raw(3,4));
    peakThreshold = cell2mat(raw(3,5));
    beadChannel = cell2mat(raw(3,6));
    secondaryChannel = cell2mat(raw(22,2));
    plotPath = cell2mat(raw(22,1));

    if ~isnan(plotPath)
        TASBEConfig.set('plots.plotPath', char(plotPath));
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing plotPath in "Cytometer" sheet');
    end

    if ~isnan(bead_model)
        TASBEConfig.set('beads.beadModel', char(bead_model)); 
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing bead model in "Cytometer" sheet');
    end

    if ~isnan(bead_batch)
        TASBEConfig.set('beads.beadBatch', char(bead_batch)); 
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing bead batch in "Cytometer" sheet');
    end

    % Ignore all bead data below 10^[rangeMin] as being too "smeared" with noise
    if ~isnan(rangeMin)
        TASBEConfig.set('beads.rangeMin', rangeMin);
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing rangeMin in "Cytometer" sheet');
    end

    if ~isnan(rangeMax)
        TASBEConfig.set('beads.rangeMax', rangeMax);
    else
        TASBESession.warn('make_color_model', 'MissingPreference', 'Missing rangeMax in "Cytometer" sheet');
    end

    % The peak threshold determines the minumum count per bin for something to
    % be considered part of a peak.  Set if automated threshold finds too many or few peaks
    if ~isnan(peakThreshold)
        TASBEConfig.set('beads.peakThreshold', peakThreshold);
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing peakThreshold in "Cytometer" sheet');
    end

    if ~isnan(beadChannel)
        TASBEConfig.set('beads.beadChannel', char(beadChannel));
    else
        TASBESession.warn('make_color_model', 'MissingPreference', 'Missing beadChannel in "Cytometer" sheet');
    end

    % When dealing with very strong fluorescence, use secondary channel to segment
    if ~isnan(secondaryChannel)
        secondaryChannel = char(secondaryChannel);
        TASBEConfig.set('beads.secondaryBeadChannel',secondaryChannel);
    else
        TASBESession.warn('make_color_model', 'MissingPreference', 'Missing secondary bead channel in "Cytometer" sheet');
    end
    
    % Extract bead, blank, and all files
    ref_filenames = {'blank','beads','all'};
    output_filenames = {};
    for i=3:size(raw3,1)
        if ~isnan(cell2mat(raw3(i,1)))
            % is a sample, check if should be included in batch analysis
            dose = char(cell2mat(raw3(i,2)));
            for j=1:numel(ref_filenames)
                if strcmpi(dose, ref_filenames{j})
                    output_filenames{j} = [stem char(cell2mat(raw3(i,12)))];
                end
            end
        else
            break
        end
    end
    beads_file = output_filenames{2};
    blank_file = output_filenames{1};
    all_file = output_filenames{3};
    
    % Autodetect gating with an N-dimensional gaussian-mixture-model
    AGP = AutogateParameters();
    autogate = GMMGating(blank_file,AGP,char(plotPath));
    
    % Dealing with channels 
    channel_names = {};
    print_names = {};
    excit_wavelens = {};
    filters = {};
    % Create one channel / colorfile pair for each color
    channels = {}; 
    for i=9:16
        print_name = cell2mat(raw(i,2));
        ind = i - 8;
        if ~isnan(print_name)
            % Check to make sure there is enough information for each channel
            row = raw(i,:);
            for j=1:8
                if isnan(cell2mat(row(j)))
                    TASBESession.warn('make_color_model', 'MissingPreference', 'Missing %s for channel %s in "Cytometer" sheet', char(cell2mat(raw(8,j))), num2str(cell2mat(raw(i,1))));
                end
            end

            print_name = char(print_name);
            channel_name = char(cell2mat(raw(i,3)));
            excit_wavelen = cell2mat(raw(i,5));
            filter = strsplit(char(cell2mat(raw(i,6))), '/');
            color = char(cell2mat(raw(i,7)));

            print_names{ind} = print_name;
            channel_names{ind} = channel_name;
            excit_wavelens{ind} = excit_wavelen;
            filters{ind} = filter;

            channels{ind} = Channel(channel_name, excit_wavelen, str2double(filter{1}), str2double(filter{2}));
            channels{ind} = setPrintName(channels{ind}, print_name); % Name to print on charts
            channels{ind} = setLineSpec(channels{ind}, color); % Color for lines, when needed
        else
            break
        end
    end
    
    % Obtain channel filenames using print_names
    colorfiles = {};
    for i=3:size(raw3,1)
        if ~isnan(cell2mat(raw3(i,1)))
            % is a sample, check if should be included in batch analysis
            dose = char(cell2mat(raw3(i,2)));
            for j=1:numel(print_names)
                if strcmpi(dose, print_names{j})
                    colorfiles{j} = [stem char(cell2mat(raw3(i,12)))];
                end
            end
        else
            break
        end
    end

    channel_info = [print_names; channel_names; excit_wavelens; filters; colorfiles]; %columns represent channels, for reference

    % Included a check to make sure that the number of channels matches with
    % the number in the template
    if numel(channels) ~= cell2mat(raw(19,1))
        TASBESession.warn('make_color_model', 'DimensionMismatch', 'Channel dimensions do not match with number of channels from template');
    end

    % Multi-color controls are used for converting other colors into FITC units
    colorpairfiles = {};
    % Entries are: channel1, channel2, constitutive channel, filename
    % This allows channel1 and channel2 to be converted into one another.
    % If you only have two colors, you can set consitutive-channel to equal channel1 or channel2
    n_channels = numel(channels);
    if n_channels == 2
        colorpairfiles{1} = {channels{1}, channels{2}, channels{2}, all_file};
    else
        for i=1:n_channels-1
            if i >= 2
                colorpairfiles{end+1} = {channels{1}, channels{i+1}, channels{i-1}, all_file};
            else
                colorpairfiles{end+1} = {channels{1}, channels{i+1}, channels{i+2}, all_file};
            end
        end
    end

    % Making the color model
    CM = ColorModel(beads_file, blank_file, channels, colorfiles, colorpairfiles);
    CM = set_ERF_channel_name(CM, channel_names{1});
    CM = add_prefilter(CM,autogate);

    % Setting some CM preferences 
%     if ~isnan(cell2mat(raw(19,5)))
%         CM = set_translation_plot(CM, cell2mat(raw(19,5)));
%     else
%         TASBESession.warn('make_color_model', 'MissingPreference', 'Missing display translation plot logical in "Cytometer" sheet');
%     end

%     if ~isnan(cell2mat(raw(22,3)))
%         CM = set_noise_plot(CM, cell2mat(raw(22,3)));
%     else
%         TASBESession.warn('make_color_model', 'MissingPreference', 'Missing display noise plot logical in "Cytometer" sheet');
%     end

    % Ignore channel data for ith channel if below 10^[value(i)]
    if ~isnan(cell2mat(raw(19,3)))
        trans_channel_min = strsplit(char(cell2mat(raw(19,3))), ',');
        CM = set_translation_channel_min(CM,[str2double(trans_channel_min{1}),str2double(trans_channel_min{2}),str2double(trans_channel_min{3})]);
    else
        TASBESession.warn('make_color_model', 'ImportantMissingPreference', 'Missing translation channel min X,Y,Z in "Cytometer" sheet');
    end

    % Execute and save the model
    CM = resolve(CM);
    display(getStandardUnits(CM));
    if ~isnan(cell2mat(raw(22,3)))
        save('-V7',char(cell2mat(raw(22,3))),'CM');
    else
        save('-V7','CM_no_name','CM');
        TASBESession.warn('make_color_model', 'MissingPreference', 'Missing CM file name in "Cytometer" sheet');
    end
end




